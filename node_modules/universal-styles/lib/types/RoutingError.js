'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function resolveStatus(arg) {
  return typeof arg === 'string' ? { status: 500, statusMessage: arg } : _extends({ status: 500,
    statusMessage: 'A routing error occurred.'
  }, arg);
}

var RoutingError = function (_Error) {
  _inherits(RoutingError, _Error);

  function RoutingError(arg, fileName, lineNumber) {
    _classCallCheck(this, RoutingError);

    var _resolveStatus = resolveStatus(arg),
        status = _resolveStatus.status,
        statusMessage = _resolveStatus.statusMessage,
        redirectLocation = _resolveStatus.redirectLocation,
        error = _resolveStatus.error;

    var _this = _possibleConstructorReturn(this, (RoutingError.__proto__ || Object.getPrototypeOf(RoutingError)).call(this, statusMessage, fileName, lineNumber));

    _this.name = 'RoutingError';
    _this.status = status;
    _this.statusMessage = statusMessage;
    _this.redirect = redirect;
    _this.message = statusMessage;
    _this.innerError = error;
    if (Error.captureStackTrace) Error.captureStackTrace(_this, _this.constructor.name);else _this.stack = new Error().stack;
    return _this;
  }

  return RoutingError;
}(Error);

exports.default = RoutingError;