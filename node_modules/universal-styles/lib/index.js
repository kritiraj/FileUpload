'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoutingError = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _RoutingError = require('./types/RoutingError');

Object.defineProperty(exports, 'RoutingError', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_RoutingError).default;
  }
});
exports.default = universalStyles;
exports.reactStyles = reactStyles;
exports.serializeStyles = serializeStyles;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _tryDefer = require('try-defer');

var _dom = require('./utils/dom');

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _router = require('router');

var _router2 = _interopRequireDefault(_router);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function universalStyles() {
  /*
  console.warn('UNIVERSAL STYLES: EXECUTING')
  if(global.__universal__)
    return global.__universal__._context(fn)
  */

  var _browserDefer = (0, _tryDefer.browserDefer)({ tracing: true }),
      _browserDefer2 = _slicedToArray(_browserDefer, 2),
      _context = _browserDefer2[0],
      replay = _browserDefer2[1].replay;
  /*
  global.__universal__ =  { _context
                          , ...defer
                          }
                          */


  global.__universal__ = global.__universal__ || [];
  global.__universal__.push(replay);
  return _context;
}

function replay() {
  if (!global.__universal__) throw new Error('global.__universal__ DNE. You must use the webpack universal-style-loader to serialize styles.');
  global.__universal__.forEach(function (x) {
    return x(true, false);
  });
}

function reactStyles(React) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      processCSS = _ref.processCSS;

  function renderStyles(req) {
    return extractElements(req, processCSS).then(function (elements) {
      return elements.map(function (_ref2, i) {
        var tagName = _ref2.tagName,
            attributes = _ref2.attributes,
            children = _ref2.children;

        switch (tagName) {
          case 'style':
            return React.createElement('style', _extends({}, attributes, { dangerouslySetInnerHTML: { __html: children } }));
          case 'link':
            return React.createElement('link', attributes);
          default:
            throw new Error('Unsupported tagName => ' + tagName);
        }
      });
    });
  }

  return function universalMiddleware(renderers, route) {
    var router = new _router2.default();
    router.use(function (req, res, next) {
      route(renderers(req).then(function (_ref3) {
        var renderBody = _ref3.renderBody,
            renderHead = _ref3.renderHead,
            renderPage = _ref3.renderPage;

        var body = renderBody();
        return renderStyles(req).then(function (styles) {
          var head = renderHead(styles);
          var page = renderPage({ body: body, head: head });
          return page;
        });
      }), res, next);
    });
    return router;
  };
}

function serializeStyles(req) {
  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      processCSS = _ref4.processCSS;

  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
    return _bluebird2.default.resolve(replay());
  } else {
    return extractElements(req, processCSS).then(function (elements) {
      return elements.map(function (_ref5) {
        var tagName = _ref5.tagName,
            attributes = _ref5.attributes,
            children = _ref5.children;

        var serialized = '<' + tagName + ' ' + Object.keys(attributes).map(function (x) {
          return x + '="' + attributes[x] + '"';
        }).join(' ') + (children ? '' : '/') + '>';
        return children ? serialized + '\n    ' + children + '\n  </' + tagName + '>' : serialized;
      }).join('\n');
    });
  }
}

function extractElements(req, processCSS) {
  var _createDOMContext = (0, _dom.createDOMContext)(replay)(req),
      result = _createDOMContext.result,
      dom = _createDOMContext.dom;

  console.trace(_util2.default.inspect(dom.document));
  var _dom$document = dom.document,
      head = _dom$document.head,
      body = _dom$document.body;

  return _bluebird2.default.all(head.childNodes.map(function (_ref6) {
    var tagName = _ref6.tagName,
        type = _ref6.type,
        media = _ref6.media,
        styleSheet = _ref6.styleSheet,
        href = _ref6.href,
        meta = _ref6.meta,
        childNodes = _ref6.childNodes;

    var _ret = function () {
      switch (tagName) {
        case 'style':
          var result = { tagName: tagName, attributes: { type: type, media: media }, meta: meta };
          var rawCSS = styleSheet ? styleSheet.cssText : childNodes[0].data;
          return {
            v: processCSS ? processCSS(rawCSS, result).then(function (children) {
              return _extends({}, result, { children: children });
            }) : _bluebird2.default.resolve(_extends({}, result, { children: rawCSS }))
          };
        case 'link':
          var attributes = { type: type, href: href };
          return {
            v: _bluebird2.default.resolve({ tagName: tagName, attributes: attributes })
          };
        default:
          throw new Error('Unsupported element tagName => ' + tagName + ', type => ' + type);
      }
    }();

    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
  }));
}