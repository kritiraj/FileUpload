'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDOM = createDOM;
exports.removeDOM = removeDOM;
exports.createDOMContext = createDOMContext;

var _applyCapitalization = require('./applyCapitalization');

var _applyCapitalization2 = _interopRequireDefault(_applyCapitalization);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createDOM(req) {
  var userAgent = req.headers['user-agent'];
  var navigator = { userAgent: userAgent };

  var elements = [];
  function createElement(tagName) {
    var attributes = new Map();
    var nodes = { parent: null, children: [] };
    var meta = {};
    function setAttribute(name, value) {
      if (name.startsWith('data-')) {
        var attrName = name.split('-').slice(1).map(function (x, i) {
          return i > 0 ? (0, _applyCapitalization2.default)(x) : x;
        }).join('');
        meta[attrName] = value;
      }
      attributes.set(name, value);
    }
    function getAttribute(name) {
      return attributes.get(name);
    }
    function hasAttribute(name) {
      return attributes.has(name);
    }
    function removeAttribute(name) {
      return attributes.remove(name);
    }

    var element = { tagName: tagName,
      setAttribute: setAttribute,
      getAttribute: getAttribute,
      hasAttribute: hasAttribute,
      removeAttribute: removeAttribute,
      get meta() {
        return meta;
      },
      get childNodes() {
        return nodes.children;
      }
    };

    function insertBefore(beforeNode, node) {
      var insertAt = nodes.children.map(function (x) {
        return x._id;
      }).indexOf(beforeNode._id);
      node.parentNode = element;
      nodes.children = nodes.children.splice(insertAt, 0, node);
    }
    function appendChild(node) {
      node.parentNode = element;
      nodes.children.push(node);
    }
    function removeChild(node) {
      node.parentNode = null;
      nodes.children = nodes.children.filter(function (x) {
        return x._id !== node._id;
      });
    }

    element.insertBefore = insertBefore;
    element.appendChild = appendChild;
    element.removeChild = removeChild;

    switch (tagName) {
      case 'style':
        element.styleSheet = {};
      case 'link':
    }
    elements.push(element);
    return element;
  }
  function createTextNode(data) {
    return { data: data };
  }
  function getElementsByTagName(tagName) {
    return elements.filter(function (x) {
      return x.tagName === tagName;
    });
  }
  function getElementById(id) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var element = _step.value;

        if (element.id === id) return element;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
  var head = createElement('head');
  var body = createElement('body');
  var document = { head: head,
    body: body,
    createElement: createElement,
    createTextNode: createTextNode,
    getElementsByTagName: getElementsByTagName,
    getElementById: getElementById
  };
  global.window = { document: document, navigator: navigator };
  global.document = document;
}

function removeDOM() {
  var dom = { window: global.window,
    document: global.document
  };
  delete global.document;
  delete global.window;
  return dom;
}

function createDOMContext(fn) {
  return function execute(req) {
    createDOM(req);
    var result = fn();
    var dom = removeDOM();
    return { result: result, dom: dom };
  };
}